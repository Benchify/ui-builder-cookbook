import React, { useState } from 'react';
import { X, CheckIcon, StarIcon, ClockIcon, TagIcon, LinkIcon, MessageSquareIcon, PaperclipIcon, FolderIcon, CalendarIcon, UserIcon, PlusIcon, FileTextIcon, ImageIcon, FileIcon } from 'lucide-react';
interface ActionDetailModalProps {
    action: any;
    isOpen: boolean;
    onClose: () => void;
}
export const ActionDetailModal = ({ action, isOpen, onClose, }: ActionDetailModalProps) => {
    const [activeTab, setActiveTab] = useState('details');
    if (!isOpen)
        return null;
    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'High':
                return 'text-red-400';
            case 'Medium':
                return 'text-yellow-400';
            case 'Low':
                return 'text-green-400';
            default:
                return 'text-gray-400';
        }
    };
    // Mock data for the action details
    const attachments = [
        {
            id: 1,
            name: 'Task Brief.pdf',
            type: 'pdf',
            size: '1.2 MB',
            uploadedBy: 'Alex Chen',
            uploadDate: '2 weeks ago',
            icon: FileTextIcon,
        },
        {
            id: 2,
            name: 'Reference Design.png',
            type: 'image',
            size: '3.7 MB',
            uploadedBy: 'Mira Lee',
            uploadDate: '1 week ago',
            icon: ImageIcon,
        },
        {
            id: 3,
            name: 'Project Timeline.xlsx',
            type: 'spreadsheet',
            size: '845 KB',
            uploadedBy: 'James Kim',
            uploadDate: '3 days ago',
            icon: FileIcon,
        },
    ];
    const subtasks = [
        {
            id: 1,
            title: 'Research competitor strategies',
            completed: true,
            assignee: 'Alex C.',
        },
        {
            id: 2,
            title: 'Draft initial marketing plan',
            completed: true,
            assignee: 'Sarah J.',
        },
        {
            id: 3,
            title: 'Review with stakeholders',
            completed: false,
            assignee: 'Alex C.',
        },
        {
            id: 4,
            title: 'Incorporate feedback',
            completed: false,
            assignee: 'Sarah J.',
        },
    ];
    const comments = [
        {
            id: 1,
            author: 'Alex Chen',
            avatar: 'A',
            content: 'I', ve, started, working, on, the, initial, draft, : .Will, share, with: the, team, by, tomorrow, : ., ',: timestamp, '2 days ago': ,
        },
        {
            id: 2,
            author: 'Sarah Johnson',
            avatar: 'S',
            content: 'Great! I', ve, collected, some, reference, materials, that, might, be, helpful, : .See, attachments, : ., ',: timestamp, '1 day ago': ,
        },
    ];
    const relatedItems = [
        {
            id: 1,
            type: 'milestone',
            title: 'Q3 Marketing Strategy',
            dueDate: 'Jul 30',
            status: 'in-progress',
        },
        {
            id: 2,
            type: 'project',
            title: 'Brand Refresh 2024',
            dueDate: 'Aug 15',
            status: 'in-progress',
        },
    ];
    return (<div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-[#161B22] border border-[#1E2530] rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-[#1E2530] flex justify-between items-start">
          <div>
            <div className="flex items-center mb-2">
              <div className={`flex items-center text-sm ${getPriorityColor(action.priority)}`}>
                <StarIcon className="w-4 h-4 mr-1.5"/>
                <span>{action.priority} Priority</span>
              </div>
              <div className={`ml-4 flex items-center text-sm ${action.dueDate?.includes('Overdue') ? 'text-red-400' : 'text-gray-400'}`}>
                <ClockIcon className="w-4 h-4 mr-1.5"/>
                <span>Due: {action.dueDate}</span>
              </div>
            </div>
            <h2 className="text-2xl font-bold">{action.title}</h2>
          </div>
          <button onClick={onClose} className="p-1 rounded-lg hover:bg-[#1E2530] transition-colors">
            <X className="w-5 h-5 text-gray-400"/>
          </button>
        </div>
        {/* Tabs */}
        <div className="flex border-b border-[#1E2530]">
          <button className={`px-6 py-3 text-sm font-medium ${activeTab === 'details' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400 hover:text-white'}`} onClick={() => setActiveTab('details')}>
            Details
          </button>
          <button className={`px-6 py-3 text-sm font-medium ${activeTab === 'subtasks' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400 hover:text-white'}`} onClick={() => setActiveTab('subtasks')}>
            Subtasks
          </button>
          <button className={`px-6 py-3 text-sm font-medium ${activeTab === 'attachments' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400 hover:text-white'}`} onClick={() => setActiveTab('attachments')}>
            Attachments
          </button>
          <button className={`px-6 py-3 text-sm font-medium ${activeTab === 'comments' ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400 hover:text-white'}`} onClick={() => setActiveTab('comments')}>
            Comments
          </button>
        </div>
        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {activeTab === 'details' && (<div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Description</h3>
                <p className="text-gray-300">
                  {action.description ||
                "Develop and finalize the marketing strategy for Q3, focusing on new product features and market expansion opportunities. This should include channel strategy, content calendar, and budget allocation."}
                </p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium mb-3">Details</h3>
                  <div className="space-y-4">
                    <div className="flex items-start">
                      <UserIcon className="w-5 h-5 text-gray-400 mt-0.5"/>
                      <div className="ml-3">
                        <p className="text-sm text-gray-400">Assigned To</p>
                        <p className="font-medium">{action.assignee || "Alex Chen"}</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <CalendarIcon className="w-5 h-5 text-gray-400 mt-0.5"/>
                      <div className="ml-3">
                        <p className="text-sm text-gray-400">Due Date</p>
                        <p className="font-medium">{action.dueDate}</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <FolderIcon className="w-5 h-5 text-gray-400 mt-0.5"/>
                      <div className="ml-3">
                        <p className="text-sm text-gray-400">Project</p>
                        <p className="font-medium">{action.project || "Marketing"}</p>
                      </div>
                    </div>
                  </div>
                </div>
                <div>
                  <h3 className="text-lg font-medium mb-3">Tags</h3>
                  <div className="flex flex-wrap gap-2">
                    {action.tags?.map((tag) => (<div key={tag} className="px-3 py-1.5 rounded-lg bg-[#1E2530] flex items-center">
                        <TagIcon className="w-4 h-4 text-gray-400 mr-2"/>
                        <span className="text-sm">{tag}</span>
                      </div>))}
                  </div>
                  <h3 className="text-lg font-medium mb-3 mt-6">Related Items</h3>
                  <div className="space-y-2">
                    {relatedItems.map((item) => (<div key={item.id} className="p-3 rounded-lg bg-[#1E2530] border border-[#2A3441] hover:bg-[#2A3441] transition-colors cursor-pointer">
                        <div className="flex items-center text-sm">
                          {item.type === 'milestone' ? (<LinkIcon className="w-4 h-4 text-blue-400 mr-2"/>) : (<FolderIcon className="w-4 h-4 text-purple-400 mr-2"/>)}
                          <div className="flex-1">
                            <p className="font-medium">{item.title}</p>
                            <div className="flex items-center mt-1 text-xs text-gray-400">
                              <span>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>
                              <span className="mx-1.5">â€¢</span>
                              <span>Due {item.dueDate}</span>
                            </div>
                          </div>
                          <div className="px-2 py-1 text-xs rounded-full bg-blue-400/20 text-blue-400">
                            {item.status}
                          </div>
                        </div>
                      </div>))}
                  </div>
                </div>
              </div>
              <div>
                <h3 className="text-lg font-medium mb-3">Progress</h3>
                <div className="p-4 rounded-lg bg-[#1E2530] border border-[#2A3441]">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium">
                      {action.completed ? 'Completed' : 'In Progress'}
                    </span>
                    <span className="text-sm text-gray-400">
                      {action.completed ? '100%' : '50%'}
                    </span>
                  </div>
                  <div className="h-2 bg-[#0A0E14] rounded-full overflow-hidden">
                    <div className={`h-full rounded-full ${action.completed ? 'bg-green-400' : 'bg-blue-400'}`} style={{
                width: action.completed ? '100%' : '50%',
            }}></div>
                  </div>
                </div>
              </div>
            </div>)}
          {activeTab === 'subtasks' && (<div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">Subtasks</h3>
                <button className="px-3 py-1.5 rounded-lg bg-blue-600 hover:bg-blue-700 transition-colors flex items-center text-sm">
                  <PlusIcon className="w-4 h-4 mr-1.5"/>
                  Add Subtask
                </button>
              </div>
              <div className="space-y-3">
                {subtasks.map((subtask) => (<div key={subtask.id} className={`p-4 rounded-lg border ${subtask.completed ? 'bg-[#1E2530]/30 border-[#2A3441]/50' : 'bg-[#1E2530]/70 border-[#2A3441] hover:bg-[#1E2530]'} transition-all`}>
                    <div className="flex items-start">
                      <button className={`mt-0.5 w-5 h-5 rounded-full flex items-center justify-center ${subtask.completed ? 'bg-blue-500/20 text-blue-500' : 'border border-gray-500 text-transparent hover:border-blue-500 hover:text-blue-500'}`}>
                        <CheckIcon className="w-3 h-3"/>
                      </button>
                      <div className="ml-3 flex-1">
                        <div className="flex justify-between">
                          <h4 className={`font-medium ${subtask.completed ? 'text-gray-400 line-through' : ''}`}>
                            {subtask.title}
                          </h4>
                          <div className="bg-[#0A0E14] text-xs px-2 py-1 rounded-full text-gray-400">
                            {subtask.assignee}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>))}
              </div>
              <div className="mt-4 p-4 rounded-lg border border-dashed border-[#2A3441] text-center">
                <div className="flex justify-center items-center text-gray-400 hover:text-gray-300 cursor-pointer">
                  <PlusIcon className="w-4 h-4 mr-1.5"/>
                  <span>Add another subtask</span>
                </div>
              </div>
            </div>)}
          {activeTab === 'attachments' && (<div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">Attachments</h3>
                <button className="px-3 py-1.5 rounded-lg bg-[#1E2530] hover:bg-[#2A3441] transition-colors flex items-center text-sm">
                  <PlusIcon className="w-4 h-4 mr-1.5"/>
                  Upload File
                </button>
              </div>
              <div className="space-y-3">
                {attachments.map((file) => {
                const FileIconComponent = file.icon;
                return (<div key={file.id} className="p-4 rounded-lg bg-[#1E2530] border border-[#2A3441] hover:border-[#3A4451] transition-colors">
                      <div className="flex items-center">
                        <div className="w-10 h-10 rounded bg-[#0A0E14] flex items-center justify-center text-blue-400">
                          <FileIconComponent className="w-5 h-5"/>
                        </div>
                        <div className="ml-3 flex-1">
                          <h4 className="font-medium">{file.name}</h4>
                          <div className="flex items-center text-sm text-gray-400">
                            <span>{file.size}</span>
                            <span className="mx-2">â€¢</span>
                            <span>Uploaded by {file.uploadedBy}</span>
                            <span className="mx-2">â€¢</span>
                            <span>{file.uploadDate}</span>
                          </div>
                        </div>
                        <button className="px-3 py-1 text-sm text-blue-400 hover:text-blue-300">
                          Download
                        </button>
                      </div>
                    </div>);
            })}
              </div>
              <div className="mt-6 p-4 rounded-lg bg-[#1E2530]/50 border border-dashed border-[#2A3441]">
                <div className="flex flex-col items-center justify-center text-center p-6">
                  <div className="w-12 h-12 rounded-full bg-[#0A0E14] flex items-center justify-center text-gray-400 mb-3">
                    <PaperclipIcon className="w-6 h-6"/>
                  </div>
                  <p className="text-sm text-gray-400 mb-3">
                    Drag and drop files here or click to browse
                  </p>
                  <button className="px-4 py-2 bg-[#2A3441] rounded-lg text-sm text-white hover:bg-[#3A4451] transition-colors">
                    Upload Files
                  </button>
                </div>
              </div>
            </div>)}
          {activeTab === 'comments' && (<div className="space-y-6">
              <div className="space-y-4">
                {comments.map((comment) => (<div key={comment.id} className="p-4 rounded-lg bg-[#1E2530] border border-[#2A3441]">
                    <div className="flex items-center mb-3">
                      <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center">
                        <span className="text-white font-bold text-sm">
                          {comment.avatar}
                        </span>
                      </div>
                      <div className="ml-3">
                        <h4 className="font-medium">{comment.author}</h4>
                        <span className="text-xs text-gray-400">
                          {comment.timestamp}
                        </span>
                      </div>
                    </div>
                    <p className="text-gray-300">{comment.content}</p>
                  </div>))}
              </div>
              <div className="mt-4">
                <div className="p-4 rounded-lg bg-[#1E2530] border border-[#2A3441]">
                  <textarea className="w-full bg-transparent border-0 resize-none focus:ring-0 text-white placeholder-gray-400 p-0" placeholder="Add a comment..." rows={3}></textarea>
                  <div className="flex justify-end mt-2">
                    <button className="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 transition-colors text-sm font-medium">
                      Post Comment
                    </button>
                  </div>
                </div>
              </div>
            </div>)}
        </div>
        {/* Footer */}
        <div className="p-4 border-t border-[#1E2530] flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <MessageSquareIcon className="w-4 h-4 text-gray-400 mr-1.5"/>
              <span className="text-sm text-gray-400">
                {comments.length} comments
              </span>
            </div>
            <div className="flex items-center">
              <PaperclipIcon className="w-4 h-4 text-gray-400 mr-1.5"/>
              <span className="text-sm text-gray-400">
                {attachments.length} attachments
              </span>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <button className="px-4 py-2 rounded-lg bg-[#1E2530] hover:bg-[#2A3441] transition-colors text-sm">
              Edit
            </button>
            {!action.completed ? (<button className="px-4 py-2 rounded-lg bg-green-600 hover:bg-green-700 transition-colors text-sm">
                Mark Complete
              </button>) : (<button className="px-4 py-2 rounded-lg bg-[#1E2530] hover:bg-[#2A3441] transition-colors text-sm">
                Reopen
              </button>)}
          </div>
        </div>
      </div>
    </div>);
};